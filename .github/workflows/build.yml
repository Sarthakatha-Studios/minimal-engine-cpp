name: Build Minimal-Engine-CPP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CMAKE_VERSION: 3.22.1
  BUILD_TYPE: Release

jobs:
  build-linux:
    runs-on: ubuntu-latest
    name: Linux - gcc - Release (Static)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: ${{ env.CMAKE_VERSION }}

      - name: Setup GCC
        run: |
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          chmod +x ./install_deps.sh
          ./install_deps.sh

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            libxinerama-dev \
            libxcursor-dev \
            libxrandr-dev \
            libxi-dev \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            build-essential

      - name: Configure CMake
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_C_COMPILER=${{ env.CC }} \
            -DCMAKE_CXX_COMPILER=${{ env.CXX }} \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_EXE_LINKER_FLAGS="-static -pthread -lm -ldl"

      - name: Build
        run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel $(nproc)

      - name: Copy assets
        run: |
          cp -r assets build/assets

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: Minimal-Engine-CPP-linux
          path: |
            build/minimal-engine
            build/assets
          retention-days: 7

  build-windows-cross:
    runs-on: ubuntu-latest
    name: Windows (Cross-Compiled) - x64 - Release (Static)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install MinGW and tools
        run: |
          sudo apt update
          sudo apt install -y mingw-w64 g++-mingw-w64 ninja-build cmake git curl

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: ${{ env.CMAKE_VERSION }}

      - name: Setup vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh

      - name: Create custom vcpkg triplet for fully static build
        run: |
          mkdir -p vcpkg/triplets/community
          cat > vcpkg/triplets/community/x64-mingw-static-release.cmake <<EOL
          set(VCPKG_TARGET_ARCHITECTURE x64)
          set(VCPKG_CRT_LINKAGE static)
          set(VCPKG_LIBRARY_LINKAGE static)
          set(VCPKG_CMAKE_SYSTEM_NAME MinGW)
          EOL

      - name: Install dependencies via vcpkg (Static)
        run: |
          ./vcpkg/vcpkg install glfw3:x64-mingw-static-release

      - name: Configure CMake for static cross-compilation
        run: |
          cmake -B build-windows \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc \
            -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=x64-mingw-static-release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++ -Wl,-Bstatic -lpthread -lwinpthread"

      - name: Build Windows binaries
        run: cmake --build build-windows --config ${{ env.BUILD_TYPE }} --parallel $(nproc)

      - name: Copy assets
        run: |
          cp -r assets build-windows/assets

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: Minimal-Engine-CPP-windows-x64
          path: |
            build-windows/minimal-engine.exe
            build-windows/assets
          retention-days: 7
