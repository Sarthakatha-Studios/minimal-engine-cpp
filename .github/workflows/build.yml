name: Build Minimal-Engine-CPP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggers

env:
  CMAKE_VERSION: 3.22.1
  BUILD_TYPE: Release

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
    
    name: Linux - ${{ matrix.compiler }} - ${{ matrix.build_type }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: ${{ env.CMAKE_VERSION }}
    
    - name: Setup compiler
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt update
          sudo apt install -y clang
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        else
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        fi
    
    - name: Install dependencies
      run: |
        chmod +x ./install_deps.sh
        ./install_deps.sh
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_C_COMPILER=${{ env.CC }} \
          -DCMAKE_CXX_COMPILER=${{ env.CXX }}
    
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel $(nproc)
    
    - name: Run tests
      run: |
        cd build
        ctest -C ${{ matrix.build_type }} --output-on-failure --verbose
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Minimal-Engine-CPP-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          build/Minimal-Engine-CPP*
          build/bin/
          build/lib/
        retention-days: 7

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, Win32]
        build_type: [Debug, Release]
    
    name: Windows - ${{ matrix.arch }} - ${{ matrix.build_type }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: ${{ env.CMAKE_VERSION }}
    
    - name: Cache vcpkg packages
      uses: actions/cache@v4
      with:
        path: |
          C:/vcpkg/installed
          C:/vcpkg/packages
        key: ${{ runner.os }}-vcpkg-${{ matrix.arch }}-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-${{ matrix.arch }}-
    
    - name: Install dependencies with vcpkg
      run: |
        vcpkg install glfw3:${{ matrix.arch }}-windows
        vcpkg install zeromq:${{ matrix.arch }}-windows
        vcpkg install sqlite3:${{ matrix.arch }}-windows
        vcpkg install gtest:${{ matrix.arch }}-windows
        vcpkg integrate install
    
    - name: Configure CMake
      run: |
        cmake -B build `
          -G "Visual Studio 17 2022" `
          -A ${{ matrix.arch }} `
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
          -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
    
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel
    
    - name: Run tests
      run: |
        cd build
        ctest -C ${{ matrix.build_type }} --output-on-failure --verbose
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Minimal-Engine-CPP-windows-${{ matrix.arch }}-${{ matrix.build_type }}
        path: |
          build/${{ matrix.build_type }}/
          build/bin/
          build/lib/
        retention-days: 7

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
    
    name: macOS - ${{ matrix.build_type }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: ${{ env.CMAKE_VERSION }}
    
    - name: Install dependencies
      run: |
        brew install glfw zeromq sqlite googletest pkg-config
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
    
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel $(sysctl -n hw.ncpu)
    
    - name: Run tests
      run: |
        cd build
        ctest -C ${{ matrix.build_type }} --output-on-failure --verbose
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Minimal-Engine-CPP-macos-${{ matrix.build_type }}
        path: |
          build/Minimal-Engine-CPP*
          build/bin/
          build/lib/
        retention-days: 7

  create-release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Create release archive
      run: |
        cd artifacts
        for dir in */; do
          zip -r "${dir%/}.zip" "$dir"
        done
    
    - name: Get version
      id: get_version
      run: |
        VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Minimal-Engine-CPP Build ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: true
        files: artifacts/*.zip
        body: |
          Automated build from commit ${{ github.sha }}
          
          ## Changes
          ${{ github.event.head_commit.message }}
          
          ## Artifacts
          - Linux (GCC/Clang)
          - Windows (x64/Win32)
          - macOS (Universal Binary)
