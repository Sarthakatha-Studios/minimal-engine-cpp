name: Build Minimal-Engine-CPP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CMAKE_VERSION: 3.22.1
  BUILD_TYPE: Release

jobs:
  build-linux:
    runs-on: ubuntu-latest
    name: Linux - gcc - Release
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: ${{ env.CMAKE_VERSION }}

    - name: Setup GCC
      run: |
        echo "CC=gcc" >> $GITHUB_ENV
        echo "CXX=g++" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        chmod +x ./install_deps.sh
        ./install_deps.sh

    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_C_COMPILER=${{ env.CC }} \
          -DCMAKE_CXX_COMPILER=${{ env.CXX }}

    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel $(nproc)

    - name: Run tests
      run: |
        cd build
        ctest -C ${{ env.BUILD_TYPE }} --output-on-failure --verbose

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Minimal-Engine-CPP-linux-gcc
        path: |
          build/Minimal-Engine-CPP*
          build/bin/
          build/lib/
        retention-days: 7

  build-windows:
    runs-on: windows-latest
    name: Windows - x64 - Release
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: ${{ env.CMAKE_VERSION }}

    - name: Cache vcpkg packages
      uses: actions/cache@v4
      with:
        path: |
          C:/vcpkg/installed
          C:/vcpkg/packages
        key: ${{ runner.os }}-vcpkg-x64-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-x64-

    - name: Install dependencies with vcpkg
      run: |
        vcpkg install glfw3:x64-windows
        vcpkg install zeromq:x64-windows
        vcpkg install sqlite3:x64-windows
        vcpkg install gtest:x64-windows
        vcpkg integrate install

    - name: Configure CMake
      run: |
        cmake -B build `
          -G "Visual Studio 17 2022" `
          -A x64 `
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
          -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake

    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

    - name: Run tests
      run: |
        cd build
        ctest -C ${{ env.BUILD_TYPE }} --output-on-failure --verbose

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Minimal-Engine-CPP-windows-x64
        path: |
          build/${{ env.BUILD_TYPE }}/
          build/bin/
          build/lib/
        retention-days: 7

  create-release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create release archive
      run: |
        cd artifacts
        for dir in */; do
          zip -r "${dir%/}.zip" "$dir"
        done

    - name: Get version
      id: get_version
      run: |
        VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Minimal-Engine-CPP Build ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: true
        files: artifacts/*.zip
        body: |
          Automated build from commit ${{ github.sha }}
          
          ## Changes
          ${{ github.event.head_commit.message }}
          
          ## Artifacts
          - Linux (GCC)
          - Windows x64
